Recursive functions
  -A recursive function is a functions that calls itself
    -Either directly or indirectly through another function

  -Recursive problem solving
    -Base case
    -Divide the rest of the problem into subproblem and do recursive call

  -There are many problems that lend themselves to recursive solutions
  -Mathematic  - factorial, Fibonacci, fractals, ...
  -Searching and sorting - binary search, search trees, ...

------------------------------------------------------------------------------------------
e.g.
  Factorial
    
    0! = 1
    n! = n * (n-1)!

    Base case:
      -Factorial(0) = 1
    Recursive case:
      -Factorial(n) = n * factorial(n-1)

in C++
  unsigned long long factorial(unsigned long long n) {
    if (n==0)
      return 1;                //base case
    return n * factorial(n-1); //recursive case
  }

  int main() {
    cout << factorial(8) << endl; //40320
    return 0;
  }
------------------------------------------------------------------------------------------
e.g.
  Fibonacci
    Fib(0) = 0
    Fib(1) = 1
    Fib(n) = Fib(n-1) + Fib(n-2)

    Base case:
      -Fib(0) = 0
      -Fib(1) = 1
    Recursive case:
      -Fib(n) = Fib(n-1) + Fib(n-2)

in C++
  unsigned long long fibonacci(unsigned long long n) {
    if (n <= 1)
      return n;                //base case
    return fibonacci(n-1) + fibonacci(n-2); //recursive case
  }

  int main() {
    cout << fibonacci(30) << endl; //832040
    return 0;
  }

  
------------------------------------------------------------------------------------------
If recursion doesn't eventually stops, you will have infinite recursion

Recursion can be resource intensive

Remember the base case(s)
  -It terminates the recursion

Only use recursive solution when it makes sense

Anything that can be done recursively can be done iteratively
  -Stack overflow error
