Copy/Move constructors and overloaded operator=

  -Not inherited from the Base class
  -You may not need to provide your own
    -Compiler-provided versions may be just fine
  -We can explicitly invoke the Base class versions from the Derived class

------------------------------------------
Copy constructors

  -Can invoke Base copy constructor explicitly
    -Derived object 'other' will be sliced

  Derived::Derived(const Derived &other)
    :Base(other), {Derived initialization list} {
      //code
  }

-------------

  class Base {
    int value;
  public:
    //same constructors as previous example

    Base(const Base &other) : value{other.value} {
      cout << "Base copy constructor" << endl;
    }
  };

  class Derived: public Base {
    int doubled_value;
  public:
    //same constructors as previous example

    Derived(const Derived &other)
    :Base(other), doubled_value {other.doubled_value} {
      cout << "Derived copy constructor" << endl;
    }
  };

-----------
operator=

  class Derived: public Base {
    int doubled_value;
  public:
    //Same constructors as previous example
    Derived &operator=(const Derived &rhs) {
      if(this != &rhs) {
        Base::operator=(rhs);              //Assign Base part
        doubled_value = rhs.doubled_value; //Assign Derived part
      }
      return *this;
    }
  };

----------
-Often you do not need to provide your own

-If you DO NOT dfine them n Derived
  -Then the compiler will create them automatically and call the base class versions

-If you DO provide Derived versions
  -then you MUST invoke the Base versions explicitly

-Be careful with raw pointers
  -Especially if Base and Derived each have raw pointers
  -Provide them with deep copy semantics
