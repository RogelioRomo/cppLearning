Using and redefining Base class methods

-Derived class can directl invoke Base class methods
-Derived class can override or redefine Base class methods
-Very powrful in the context of polymorphism (next section)

---------------------------------------------

  class Account {
  public:
    void deposit(double amount) {balance+=amount;}
  };

  class Savings_Account: public Account {
  public:
    void deposit(double amount) {//redefine Base class method
      amount+=some_interest;
      Account::deposit(amount); //invoke class Base class method
    }
  };

---------------------------------------------
Static binding of method calls

-Binding of which method to use is done at compile time
  -Default binding for c++ is Static
  -Derived class objects will use Derived::deposit
  -But, we can explicitly invoke Base::deposit from Derived::deposit
  -Ok, but limited - much more powerful approach is dynamic binding which
  we will see in the next section

------------

  Base b;
  b.deposit(1000.0); //Base::deposit

  Derived d;
  d.deposit(1000.0); //Derived::deposit

  Base *ptr = new Derived();
  ptr->deposit(1000.0); //Base::deposit ????
