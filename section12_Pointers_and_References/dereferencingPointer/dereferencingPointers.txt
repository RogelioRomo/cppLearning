Dereferencing a pointer
  Access the data we're pointing to - dereferencing a pointer
    -If score_ptr is a pointer and has a valid address
    -Then you can access the data at the address contained in the score_ptr using the
    dereferencing operator *

    e.g.
      int score{100};
      int *score_ptr{&score};

      cout << *score_ptr << endl; //100

      *score_ptr = 200; //we change the value of score via score_ptr to 200
                        //since the pointer is pointing to the score address
                        //we asign a new value to that address changing the original
                        //value of score indirectly with *score_ptr
      cout << *score_ptr << endl; //200
      cout << score << endl; //200

--------------------------------------------------------------------------
e.g.
  double high_temp{100.7};
  double low_temp{37.4};
  double *temp_ptr{&high_temp};

  cout << *temp_ptr << endl; //100.7

  temp_ptr = &low_temp;

  cout << *temp_ptr << endl; //37.4

--------------------------------------------------------------------------
e.g.
  string name{"Frank"};
  string *string_ptr{&name};
  cout << *string_ptr << endl; //Frank
  name = "James";
  cout << *string_ptr << endl; //James

