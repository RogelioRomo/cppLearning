What is operator overloading?
  
  -Using traditional operators such as +, =, *, etc.with user-defined types
  -Allows user define types to behave similar to built-in types
  -Can make code more readable and writable
  -Not done automatically (except for the assignment operator)
  -They must be explicitly defined

----------------------------------------------------------------
Suppose we have Number class that models any number
  
  -Using functions:
    Number result = multiply(add(a,b), divide(c,d));

  -Using member methods:
    Number result (a.add(b)).multiply(c.divide(d));

----------------------------------------------------------------
Suppose we have a Number class tha models any number
  
  Number result = (a+b)*(c/d);

----------------------------------------------------------------
What operators can be overloaded?
  
  -The mojority f C++'s operators can be overloaded
  -The following operators cannot be overloaded
    ::
    :?
    .*
    .
    sizeof

----------------------------------------------------------------
Some basic rules
  
  -Precedence and Associativity cannot be changed
  -'arity' cannot be changed (i.e. cna't make the division operator unary)
  -Can't overload operators for primitive type (e.g. int, double, etc)
  -Can't create new operators
  -[], (), ->, and the assignment operator (=) must be declared as member methods
  -Other operators can be declared as member methods or global functions

----------------------------------------------------------------
Some examples

-int
  a = b + c;
  a < b
  std::cout << a

-double
  a = b + c 
  a < b
  std::cout << a

-long
  a = b + c 
  a < b
  std::cout << a

-std::string
  s1 = s2 + s3
  s1 < s2
  std::cout << s1

-Mystring
  s1 = s2 + s3
  s1 < s2
  s1 == s2
  std::cout << s1

-Player
  p1 < p2
  p1 == p2
  std::cout << p1

----------------------------------------------------------------
Mystring class declaration for this section
  
  class Mystring {
  private:
    char *str; //c-style string
  public:
    Mystring();
    Mystring(const char *s);
    Mystring(const Mystring &source);
    ~Mystring();
    void display() const;
    int get_length() const;
    const char *get_str() const;
  };
