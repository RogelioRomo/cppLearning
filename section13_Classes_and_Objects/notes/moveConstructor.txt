Move constructor
  
  -Sometimes when we execute code, the compiler creates unnamed temporary values

    int total{0};
    total = 100 + 200;

    -100 + 200 is evaluated and 300 stored in an unnamed temp value
    -the 300 is then stored in the variable total
    -then the temp value is discarded

  -The same happens with objects as well
  -Important to understand the concept of l-values and r-values

----------------------------------------------------------------------------
When is it useful?
  
  -Sometimes copy constructors are called many times automatically due to the copy semantics
  of C++

  -Copy constructor doing deep copying can ahve a significant performance bottleneck

  -C++11 introduced move semantics and the moce constructor

  -Move constructor moves an object rather than copy it

  -Optional but recommended when you have a raw pointer

  -Copy elision - C++ may optimize copying away completly
  (RVO - return value optimization)

---------------------------------------------------------------------------
r-value references
  -used in moving semantics and perfect forwarding
  -move semantics is all about r-value references
  -used by move constructor and move assignment operator to efficiently move an object
  rather than copy it
  -r-value reference operator (&&)

e.g.
  int x{100};
  int &l_ref = x; //l-value reference
  l_ref = 10; //change x to 10

  int &&r_red = 200 //r-value ref
  r_ref = 300; //change r_ref to 300

    int &&x_ref = x; //Compiler error

---------------------------------------------------------------------------
l-value reference parameters

  int x{100}; //x is an l-value

  void func(int &num); //A

  func(x); //calls A - x is an l-value
  func(200); //Error - 200 is an r-value

error: cannot bind non-const lvalue reference of type 'int&' to an r-value of type 'int'

---------------------------------------------------------------------------
r-value reference parameters

  int x{100}; //x is an l-value
   void func(int &num); //B

   func(200); //Calls B - 200 is an r-value
   func(x); //Error - x is an l-value

error: cannot bind rvalue references to type 'int&&' int to lvalue of type 'int'

-----------------------------------------------------------------------------
l-value and r-value reference parameters

  int x{100}; //x is an l-value

  void func(int &num); //A
  void func(int &&num); //B

  func(x); //calls A - x is an l-value
  func(200); //calls B - 200 is an r-value

-----------------------------------------------------------------------------
Example - move class
  
  class Move {
  private:
    int *data;
  public:
    void set_data_value(int d) {*data = d;}
    int get_data_value() {return *data;}
    Move(int d); //Constructor
    Move(const Move &source); //Copy constructor
    ~Move(); //Destructor
  };

  Move::Move(const Move &source) {
    data = new int;
    *data = *source.data;
  }

-----------------------------------------------------------------------------
Inefficient copying
  
  Vector<Move> vec;

  vec.push_back(Move{10});
  vec.push_back(Move{20});

  Copy constructor will be called to copy the temps
  Output:

  Constructor for: 10
  Constructor for: 10
  Copy constructor  - deep copy for: 10
  Destructor freeing data for: 10
  Constructor for: 20
  Constructor for: 20
  Copy constructor - deep copy for: 20
  Constructor for: 10
  Copy constructor  - deep copy for: 10
  Destructor freeing data for: 10
  Destructor freeing data for: 20

------------------------------------------------------------------------------
What does the move constructor do?
  
  -Instead of making a deep copy of the move constructor
    -'moves' the resource
    -Simply copies the address of the resource from source to the current object
    -And, nulls out the pointer in the source pointer

  -Very efficient

------------------------------------------------------------------------------
Syntax r-value reference
  
  Type::Type(Type &&source);

  Player::Player(Player &&source);

  Move::Move(Move &&source);

  class Move {
  private:
    int *data; //raw pointer
  public:
    void set_data_value(int d) {*data = d;}
    int get_data_value() {return *data;}
    Move(int d); //constructor
    Move(const Move &source); //Copy constructor
    Move(Move &&source); //Move constructor
    ~Move(); //Destructor
  };

  Move::Move(Move &&source)
    : data{source.data} {
    source.data = nullptr;
  }

  'Steal' the data and then null out the source poitner

-----------------------
efficient copying

  vector<Move> vec;

  vec.push_back(Move{10});
  vec.push_back(Move{20});

  Constructor for: 10
  Move constructor - moving resource: 10
  Destructor freeing data for nullptr
  Constructor for: 20
  Move constructor - moving resource: 20
  Move constructor - moving resource: 10
  Destructor freeing data for nullptr
  Destructor freeing data for nullptr
  Destructor freeing data for: 10
  Destructor freeing data for: 20

