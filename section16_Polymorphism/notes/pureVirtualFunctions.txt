Pure virtual functions and abstract classes

  -Abstract classes
    -Cannot instantiate objects
    -These classes are used as base classes in inheritance hierarchies
    -Often referred to as Abstract Base classes

  -Concrete class
    -Used to instantiate objects from
    -All their member functions are defined
      -Checking Account, Savings Account
      -Faculty, Staff
      -Enemy, Level Boss

-----------------------------------
Abstract base class
  -To generic to create objects from
    -Shape, Employee, Account, Player

  -Serves as parent to Derived classes that may have objects
  -Contains at least one pure virtual function

-----------------------------------
Pure virtual function

  -Used to make a class abstract
  -Specified with "=0" in its declaration

    virtual void function() = 0; //pure virtual function

  -Typically do not provide implementations

  -Derived classes MUST override the base class
  -If the Derived class does not override then the Derived class is also abstract
  -Used when it doesnt make sense for a base class to have an implementation
    -But concrete classes must implement it

    virtual void draw() = 0; //Shape
    virtual void defend() = 0; //Player

-----------------------------------

  class Shape {//Abstract
  private:
    //attributes common to all shapes
  public:
    virtual void draw() = 0; //pure virtual function
    virtual void rotate() = 0; //pure virtual function
    virtual ~Shape();
    ...
  };

  class Circle: public Shape {
  private:
    //attributes for a circle
  public:
    virtual void draw() override {
      //code to draw a circle
    }
    virtual void rotate() override {
      //code to rotate a circle
    }
    virtual ~Circle();
    ...
  };

-----------------------------------
Abstract base class

  -Cannot be instantiated

    Shape shape;              //ERROR
    Shape *ptr = new Shape(); //ERROR

  -We can use pointers and references to dynamically refe to concrete classes
   derived from them

  Shape *ptr = new Circle();
  ptr->draw();
  ptr->rotate();
