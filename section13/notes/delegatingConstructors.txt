Delegating Constructors
  
  -Often the code for constructors is very similar
  -Duplicated code can lead to errors
  -C++ allows delegating constructors
    -code for one constructor can call another in the initialization list
    -avoids duplicating code

-------------------------------------------------------------------------------
e.g.
  
  class Player {
  private:
    std::string name;
    int health;
    int xp;
  public:
    //Overloaded constructors
    Player();
    Player(std::string name_val);
    Player(std::string name_val, int health_val, int xp_val);
  };

  //normal use for initialization lists
  Player::Player()
    :name{"None"}, health{0}, xp{0}{
  }

  Player::Player(std::string name_val)
    :name{name_val}, health{0}, xp{0} {
  }

  Player::Player(std::string name_val, int health_val, int xp_val)
    :name{name_val}, health{health_val}, xp{xp_val} {
  }

  //delegating constructors
  
  Player::Player(std::string name_val, int health_val, int xp_val)
    :name{name_val}, health{health_val}, xp{xp_val} {
  }

  Player::Player()
    :Player {"None", 0, 0} {
  }

  Player::Player(std::string name_val)
    :Player{name_val, 0, 0} {
  }


