Implementing member methods

  -Very similar to how we implement functions

  -Member methods have access to member attributes
    -So you don't need to pass them as arguments

  -Can be implemented inside the class declaration
    -Implicitly inline

  -Can be implemented outside the class declaration
    -Need to use Class_name::methods_name

  -Can separate specification from implementation
    -.h file for the class declaration
    -.cpp file for the class implementation

------------------------------------------------------------------
Inside the class declaration
  
  class Account {
  private:
    double alance;
  public:
    void set_balance(double bal) {
      balance = bal;
    }
    double get_balance(){
      return balance;
    }
  };

Outside the class declaration
  class Account {
  private:
    double balance;
  public:
    void set_balance(double bal);
    double get_balance();
  };

  void Account::set_balance(double bal) {
    balance = bal;
  }

  double Account::get_balance() {
    return balance;
  }

------------------------------------------------------------------
Separating specification from implementation

suppose we are inside file 'Account.h'

  class Account {
  private:
    double balance;
  public:
    void set_balance(double bal);
    double get_balance();
  };

Before we use this specification file, we need to take care of a potential problem.
If this file is included by more than one .cpp file then the compiler will see the declaration
for the account class more than once and will give us an error about duplicate declarations

In order to solve this we can use what is called an 'include guard', that ensure that the
compiler will process this file only once no matter how many times is included

-------------------------------------------------------------------
Include guards

  #ifndef _ACCOUNT_H_ //ifndef = if not defined
  #define _ACCOUNT_H_ //it is defined

    //Account class declaration

  #endif

If the file is already seen by the preprocessor (we say it is defined) then it jumps to the
#endif and will not process the declaration. If it is not defined then it executes the
declaration

-------------------------------------------------------------------
Account.h 
  
  #ifndef _ACCOUNT_H_
  #define _ACCOUNT_H_

  class Account {
  private:
    double balance;
  public:
    void set_balance(double bal);
    double get_balance();
  };

  #endif

-------------------------------------------------------------------
Something similar to the include guard is the '#pragma once' guard
This is not supported by all the compilers, so you need to check if the compiler supports it

Account.h 

  #pragma once

  class Account {
  private:
    double balance;
  public:
    void set_balance(double bal);
    double get_balance();
  };

------------------------------------------------------------------
now we can craft the implementation of our class in a .cpp file

Account.cpp

  #include "Account.h" // not the "". This will tell the compiler to look for a header
  file locally

  void Account::set_balance(double bal) {
    balance = bal;
  }

  double Account::get_balance() {
    return balance;
  }

------------------------------------------------------------------
main.cpp
  
  #include <iostream> //<> used to include system header files that the compiler knows where they are
  #include "Account.h" //"" used to include header files local to our project

  int main() {
    Account frank_account;
    frank_account.set_balance(1000.00);
    double bal + frank_account.get_balance();

    std::cout << bal << std::endl; //1000
    return 0;
  }
