Overloading functions
  
  We can have functions that have different parameter lists that have the same name
  Abstraction mechanism since we can just think 'print' for example
  A type of polymorphism
    We can have the same name work with different data types to execute similar behavior
  The compiler must be able to tell the functions apart based on the parameter lists and argument supplied

----------------------------------------------------------------------------
e.g.
  
  int add_numbers(int, int); //add ints
  double add_numbers(doubles, double); //add doubles

  int main() {
    cout << add_numbers(10, 20) << endl; //integer
    cout << add_numer(10.0, 20.0) << endl; //double
    return 0;
  }

  int add_numbers(int, int) {
    return a + b;
  }

  double add_numbers(double a, double b) {
    return a + b;
  }

----------------------------------------------------------------------------
e.g.

  void display(int n);
  void display(double d);
  void display(std::string s);
  void display(std::string s, std::string t);
  void display(std::vector<int> v);
  void display(std::vector<std::string> v);
